#%RAML 1.0

title: test service API
baseUri: {{ BASE_URI }}
version: v1

#securitySchemes:
#    oauth_2_0: !include security/outh2.raml

traits:
    secured: !include traits/secured.raml
    clientSecured: !include traits/client_secured.raml
    adminSecured: !include traits/admin-secured.raml
    paginated: !include traits/paginated.raml
    expandable: !include traits/expandable.raml
    sortable: !include traits/sortable.raml
    notFoundResponse: !include traits/not-found-response.raml
    entityResponse: !include traits/entity-response.raml
    formAction: !include traits/form-action.raml

    listAction: !include traits/actions/list.raml
    createAction: !include traits/actions/create.raml
    fetchAction: !include traits/actions/fetch.raml
    updateAction: !include traits/actions/update.raml
    deleteAction: !include traits/actions/delete.raml
    transitAction: !include traits/actions/transit.raml

types:
    NotFoundBody:
        type: object
        properties:
            message?: string
        example: |
            {
                "message": "Not found"
            }
    BadResponseBody:
        type: object
        properties:
            message?: string
        example: |
            {
                "message": "Error message"
            }
    ValidationError:
        properties:
            code: string
            description: string
    UnporcessableEntityBody:
        properties:
            errors: ValidationError[]
            fields:
                type: object
        example: |
            {
                "errors": [
                    {"code": "global.code", "description": "global error description"}
                ],
                "fields": {
                    "field1": {
                        "errors": [
                            {"code": "field2.global.code", "description": "field1 global error description"}
                        ],
                        "fields": []
                    },
                    "field2": {
                          "errors": [
                              {"code": "field2.global.code", "description": "field2 global error description"}
                          ],
                          "fields": {
                              "field2.1": {
                                  "errors": [
                                      {"code": "field2.1.global.code", "description": "field2.1 global error description"}
                                  ],
                                  "fields": []
                              }
                          }
                    }
                }
            }

    User:
        type: object
        properties:
            id: integer
            externalId: string
            externalService: string
            name: string
            email: string
            enabled: true
            site: Site|int
            siteAdmins: SiteAdmin[]|int[]
            account: integer

    UserInput:
        properties:
            name: string
            email: string
            plainPassword: string
            enabled: true
            site: integer
            siteAdmins: SiteAdminInput[]

    ResetPassword:
        properties:
            plainPassword: string



/oauth/v2/token:
    post:
        body:
            application/x-www-form-urlencoded:
                properties:
                    client_id:
                        description: Client id
                        type: string
                        required: true
                    client_secret:
                        description: Client secret
                        type: string
                        required: true
                    grant_type:
                        description: |
                          Grant type can be one of:<br>
                          "client_credentials" for annonymous token<br>
#                          "urn:requestum:oauth2:grant-type:external-service" for user token granted by external auth service<br>
                          "password" for regular user
                        type: string
                        required: true
#                    service:
#                        description: Used with "urn:requestum:oauth2:grant-type:external-service" grant type, to specify external auth service. This api supports "facebook" and "google".
#                        type: string
#                        required: false
                    token:
                        description: Used with "urn:requestum:oauth2:grant-type:external-service" grant type, to pass external service access token.
                        type: string
                        required: false
                    username:
                        description: Used with "password" grant type, to pass username.
                        type: string
                        required: false
                    password:
                        description: Used with "password" grant type, to pass password.
                        type: string
                        required: false
/api:
    /users:
        post:
            is: [clientSecured, createAction: {inputType: UserInput, type: User}]
        get:
            is: [secured, listAction: {type: User}, sortable]

        /me:
            get:
                is: [secured, fetchAction: {type: User}]
                description: Fetches user for passed OAuth token
        /{id}:
            get:
                is: [secured, fetchAction: {type: User}]
            patch:
                is: [secured, updateAction: {inputType: UserInput, type: User}]
        /{confirmationToken}:
            queryParameters:
                confirmationToken:
                    description: Confirmation token requested by users/{email}/update-token endpoint. Should starts with "t_" prefix.
            patch:
                is: [clientSecured, updateAction: {inputType: UserInput, type: User}]
        /{email}/update-token:
            post:
                is: [clientSecured]
                description: Creates and sends update token to user
                body:
                    application/json:
                        type: object
                        properties:
                            transport:
                                type: string
                                description: Transport id, to send token to user, can be one of ("web:password-reset", "web:registration-invite")
                responses:
                    404:
                        description: If user with given email not found
                            body:
                                application/json:
                                    type: NotFoundBody
                    204:
                        description: On success

    /download:
        /{id}:
            get:
                is: [adminSecured, fetchAction:{type: BatchPrint}]